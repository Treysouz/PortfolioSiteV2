name: üïµÔ∏è Testing

on:
  workflow_call:
    inputs:
      branch:
        description: 'Branch to test'
        required: false
        default: ''
        type: string
    secrets:
      SUPABASE_URL:
        required: true
      SUPABASE_KEY:
        required: true
    outputs:
      tests-passed:
        description: 'Whether all tests passed'
        value: ${{ jobs.test.outputs.success }}
      coverage-summary:
        description: 'Test coverage summary'
        value: ${{ jobs.test.outputs.coverage-summary }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
    outputs:
      success: ${{ steps.mark-success.outputs.success }}
      coverage-summary: ${{ steps.coverage.outputs.summary }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: 'npm'

      - name: Cache node_modules
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run linting
        run: |
          echo "üîç Running linting..."
          npm run lint

      - name: Run unit tests with coverage
        run: |
          echo "üß™ Running unit tests with coverage..."
          npm run test:unit-coverage

      - name: Cache Playwright browsers
        id: playwright-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
            ~/Library/Caches/ms-playwright
            %USERPROFILE%\AppData\Local\ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run e2e tests
        run: |
          echo "üñ•Ô∏è Running e2e tests..."
          npm run test:e2e

      - name: Generate coverage summary
        id: coverage
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            COVERAGE=$(node -e "
              const fs = require('fs');
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const total = coverage.total;
              console.log(\`üìä **Test Coverage Report**

              | Metric | Percentage | Covered/Total |
              |--------|------------|---------------|
              | Lines | \${total.lines.pct}% | \${total.lines.covered}/\${total.lines.total} |
              | Functions | \${total.functions.pct}% | \${total.functions.covered}/\${total.functions.total} |
              | Branches | \${total.branches.pct}% | \${total.branches.covered}/\${total.branches.total} |
              | Statements | \${total.statements.pct}% | \${total.statements.covered}/\${total.statements.total} |\`);
            ")
            echo "summary<<EOF" >> $GITHUB_OUTPUT
            echo "$COVERAGE" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "summary=No coverage data available" >> $GITHUB_OUTPUT
          fi

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.run_id }}-${{ github.run_attempt }}
          path: coverage/
          retention-days: 7

      - name: Mark tests as successful
        id: mark-success
        if: success()
        run: echo "success=true" >> $GITHUB_OUTPUT

      - name: Mark tests as failed
        if: failure()
        run: echo "success=false" >> $GITHUB_OUTPUT

      - name: Test Summary
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ All tests passed successfully!"
            echo "---------------------------------"
            echo "üîç Linting: ‚úÖ"
            echo "üß™ Unit tests: ‚úÖ"
            echo "üñ•Ô∏è E2E tests: ‚úÖ"
          else
            echo "‚ùå Tests failed!"
            echo "----------------"
            echo "üîç Check the logs above for details"
            echo "‚ö†Ô∏è Deployment will be skipped"
          fi
